rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.data.uid == request.auth.uid &&
                   request.resource.data.email == request.auth.token.email;
      allow read, update: if request.auth != null && 
                          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow delete: if request.auth != null && 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Rooms collection (multiplayer odalar)
    match /rooms/{roomId} {
      allow read, write: if request.auth != null;
      
      // Chat messages subcollection
      match /chat/{messageId} {
        allow read, write: if request.auth != null;
      }
      
      // User answers subcollection
      match /answers/{userId} {
        allow read, write: if request.auth != null;
      }
      
      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null;
      }
    }
    
    // Questions collection
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                  exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
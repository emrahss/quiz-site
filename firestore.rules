rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions - yardımcı fonksiyonlar
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isModerator() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isModerator == true);
    }
    
    function isVerifiedUser() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true;
    }
    
    function isRoomParticipant(roomData) {
      return request.auth.uid in roomData.participants;
    }
    
    function isRoomOwner(roomData) {
      return roomData.ownerId == request.auth.uid;
    }
    
    function canAccessPrivateRoom(roomData) {
      return roomData.visibility == 'public' || 
             isRoomOwner(roomData) || 
             isRoomParticipant(roomData) ||
             isModerator();
    }

    // Users collection - kullanıcı yönetimi
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      
      allow create: if isAuthenticated() && 
                   isOwner(userId) &&
                   request.resource.data.uid == request.auth.uid &&
                   request.resource.data.email == request.auth.token.email &&
                   request.resource.data.createdAt == request.time &&
                   !('isAdmin' in request.resource.data) &&
                   !('isModerator' in request.resource.data);
      
      allow update: if isOwner(userId) && 
                   request.resource.data.uid == resource.data.uid &&
                   request.resource.data.email == resource.data.email &&
                   request.resource.data.createdAt == resource.data.createdAt &&
                   (!('isAdmin' in request.resource.data) || 
                    request.resource.data.isAdmin == resource.data.isAdmin) &&
                   (!('isModerator' in request.resource.data) || 
                    request.resource.data.isModerator == resource.data.isModerator);
      
      // Admin/Moderator updates
      allow update: if isAdmin() && userId != request.auth.uid;
      allow delete: if isAdmin() && userId != request.auth.uid;
    }
    
    // User Profiles - genel profil bilgileri
    match /userProfiles/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // User Settings - özel kullanıcı ayarları
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Multiplayer Rooms - şifreli oda sistemi ile
    match /multiplayerRooms/{roomId} {
      allow read: if isAuthenticated() && 
                 (resource.data.visibility == 'public' || 
                  canAccessPrivateRoom(resource.data));
      
      allow create: if isAuthenticated() && 
                   request.resource.data.ownerId == request.auth.uid &&
                   request.resource.data.createdAt == request.time &&
                   ('maxParticipants' in request.resource.data ? 
                    request.resource.data.maxParticipants >= 2 && 
                    request.resource.data.maxParticipants <= 50 : true) &&
                   ('password' in request.resource.data ? 
                    request.resource.data.password.size() >= 4 && 
                    request.resource.data.password.size() <= 20 : true);
      
      allow update: if isAuthenticated() && 
                   (isRoomOwner(resource.data) || 
                    (isRoomParticipant(resource.data) && 
                     !('ownerId' in request.resource.data) &&
                     !('password' in request.resource.data) &&
                     !('visibility' in request.resource.data)));
      
      allow delete: if isRoomOwner(resource.data) || isAdmin();
      
      // Chat messages - gelişmiş sohbet
      match /chat/{messageId} {
        allow read: if isAuthenticated() && 
                   canAccessPrivateRoom(get(/databases/$(database)/documents/multiplayerRooms/$(roomId)).data);
        
        allow create: if isAuthenticated() && 
                     canAccessPrivateRoom(get(/databases/$(database)/documents/multiplayerRooms/$(roomId)).data) &&
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.timestamp == request.time &&
                     request.resource.data.message.size() <= 500;
        
        allow update: if isOwner(resource.data.userId) && 
                     request.time < resource.data.timestamp + duration.value(5, 'm');
        
        allow delete: if isOwner(resource.data.userId) || 
                     isRoomOwner(get(/databases/$(database)/documents/multiplayerRooms/$(roomId)).data) ||
                     isModerator();
      }
      
      // User answers
      match /answers/{answerId} {
        allow read: if isAuthenticated() && 
                   canAccessPrivateRoom(get(/databases/$(database)/documents/multiplayerRooms/$(roomId)).data);
        
        allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.timestamp == request.time;
        
        allow update: if isOwner(resource.data.userId) && 
                     request.time < resource.data.timestamp + duration.value(30, 's');
      }
      
      // Room Analytics - oda istatistikleri
      match /analytics/{analyticsId} {
        allow read: if isRoomOwner(get(/databases/$(database)/documents/multiplayerRooms/$(roomId)).data) ||
                   isAdmin();
        allow write: if isAuthenticated();
      }
      
      // Room Participants - katılımcı yönetimi
      match /participants/{userId} {
        allow read: if isAuthenticated() && 
                   canAccessPrivateRoom(get(/databases/$(database)/documents/multiplayerRooms/$(roomId)).data);
        
        allow create: if isOwner(userId) && 
                     canAccessPrivateRoom(get(/databases/$(database)/documents/multiplayerRooms/$(roomId)).data);
        
        allow delete: if isOwner(userId) || 
                     isRoomOwner(get(/databases/$(database)/documents/multiplayerRooms/$(roomId)).data) ||
                     isModerator();
      }
    }
    
    // Regular Rooms - normal quiz odaları
    match /rooms/{roomId} {
      allow read, write: if isAuthenticated();
      
      // Chat messages
      match /chat/{messageId} {
        allow read, write: if isAuthenticated();
        allow delete: if isOwner(resource.data.userId) || isModerator();
      }
      
      // User answers
      match /answers/{userId} {
        allow read, write: if isAuthenticated();
      }
      
      // Notifications - bildirimler
      match /notifications/{notificationId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid ||
                      resource.data.targetUserId == request.auth.uid);
        allow delete: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid ||
                      resource.data.targetUserId == request.auth.uid ||
                      isModerator());
      }
    }
    
    // Tournament System - turnuva sistemi
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                   request.resource.data.organizerId == request.auth.uid &&
                   request.resource.data.createdAt == request.time &&
                   request.resource.data.startDate > request.time;
      
      allow update: if resource.data.organizerId == request.auth.uid ||
                   isModerator();
      
      allow delete: if resource.data.organizerId == request.auth.uid ||
                   isAdmin();
      
      // Tournament Participants
      match /participants/{userId} {
        allow read: if isAuthenticated();
        allow create: if isOwner(userId);
        allow delete: if isOwner(userId) || 
                     resource.data.organizerId == request.auth.uid ||
                     isModerator();
      }
      
      // Tournament Results
      match /results/{resultId} {
        allow read: if isAuthenticated();
        allow write: if resource.data.organizerId == request.auth.uid ||
                    isModerator();
      }
    }
    
    // Questions collection - soru bankası
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                   request.resource.data.authorId == request.auth.uid &&
                   request.resource.data.createdAt == request.time;
      
      allow update: if resource.data.authorId == request.auth.uid ||
                   isModerator();
      
      allow delete: if resource.data.authorId == request.auth.uid ||
                   isAdmin();
    }
    
    // Question Categories - soru kategorileri
    match /questionCategories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isModerator();
    }
    
    // User Reports - kullanıcı şikayetleri
    match /reports/{reportId} {
      allow read: if resource.data.reporterId == request.auth.uid ||
                 isModerator();
      
      allow create: if isAuthenticated() && 
                   request.resource.data.reporterId == request.auth.uid &&
                   request.resource.data.createdAt == request.time;
      
      allow update: if isModerator();
      allow delete: if isAdmin();
    }
    
    // Leaderboards - liderlik tabloları
    match /leaderboards/{boardType} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      
      match /entries/{userId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId) || isAdmin();
      }
    }
    
    // Notifications - bildirimler
    match /notifications/{notificationId} {
      allow read: if resource.data.userId == request.auth.uid ||
                 resource.data.fromUserId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                   (request.resource.data.fromUserId == request.auth.uid ||
                    isAdmin());
      
      allow update: if resource.data.userId == request.auth.uid;
      
      allow delete: if resource.data.userId == request.auth.uid ||
                   resource.data.fromUserId == request.auth.uid ||
                   isAdmin();
    }
    
    // Friend Requests - arkadaşlık istekleri
    match /friendRequests/{requestId} {
      allow read: if resource.data.fromUserId == request.auth.uid ||
                 resource.data.toUserId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                   request.resource.data.fromUserId == request.auth.uid &&
                   request.resource.data.createdAt == request.time;
      
      allow update: if resource.data.toUserId == request.auth.uid;
      
      allow delete: if resource.data.fromUserId == request.auth.uid ||
                   resource.data.toUserId == request.auth.uid;
    }
    
    // Game Sessions - oyun oturumları
    match /gameSessions/{sessionId} {
      allow read: if resource.data.userId == request.auth.uid ||
                 (resource.data.participants != null && 
                  request.auth.uid in resource.data.participants) ||
                 isAdmin();
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.startTime == request.time;
      
      allow update: if resource.data.userId == request.auth.uid ||
                   (resource.data.participants != null && 
                    request.auth.uid in resource.data.participants);
    }
    
    // System Logs - sistem logları (sadece admin)
    match /systemLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
    }
    
    // Ban Lists - yasaklı kullanıcılar
    match /bans/{userId} {
      allow read: if isAdmin();
      allow write: if isModerator();
    }
    
    // User Stats - kullanıcı istatistikleri
    match /userStats/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin();
    }
  }
}
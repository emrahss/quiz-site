rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    function isModerator() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isModerator == true);
    }
    function isRoomOwner(roomData) {
      return roomData.ownerId == request.auth.uid;
    }
    function isRoomParticipant(roomData) {
      return request.auth.uid in roomData.participants;
    }
    function canAccessPrivateRoom(roomData) {
      return roomData.visibility == 'public' || isRoomOwner(roomData) || isRoomParticipant(roomData) || isModerator();
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(userId) && request.resource.data.uid == request.auth.uid && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin() && userId != request.auth.uid;
    }
    
    match /userProfiles/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    match /multiplayerRooms/{roomId} {
      allow read: if isAuthenticated() && (resource.data.visibility == 'public' || canAccessPrivateRoom(resource.data));
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid && ('maxParticipants' in request.resource.data ? request.resource.data.maxParticipants >= 2 && request.resource.data.maxParticipants <= 50 : true) && ('password' in request.resource.data ? request.resource.data.password.size() >= 4 && request.resource.data.password.size() <= 20 : true);
      allow update: if isAuthenticated() && (isRoomOwner(resource.data) || isRoomParticipant(resource.data));
      allow delete: if isRoomOwner(resource.data) || isAdmin();
      
      match /chat/{messageId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid && request.resource.data.message.size() <= 500;
        allow update: if isOwner(resource.data.userId) && request.time < resource.data.timestamp + duration.value(5, 'm');
        allow delete: if isOwner(resource.data.userId) || isModerator();
      }
      
      match /answers/{answerId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update: if isOwner(resource.data.userId) && request.time < resource.data.timestamp + duration.value(30, 's');
      }
      
      match /analytics/{analyticsId} {
        allow read: if isRoomOwner(get(/databases/$(database)/documents/multiplayerRooms/$(roomId)).data) || isAdmin();
        allow write: if isAuthenticated();
      }
      
      match /participants/{userId} {
        allow read: if isAuthenticated();
        allow create: if isOwner(userId);
        allow delete: if isOwner(userId) || isModerator();
      }
    }
    
    match /rooms/{roomId} {
      allow read, write: if isAuthenticated();
      
      match /chat/{messageId} {
        allow read, write: if isAuthenticated();
        allow delete: if isOwner(resource.data.userId) || isModerator();
      }
      
      match /answers/{userId} {
        allow read, write: if isAuthenticated();
      }
      
      match /notifications/{notificationId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated();
        allow delete: if isAuthenticated();
      }
    }
    
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.organizerId == request.auth.uid;
      allow update: if resource.data.organizerId == request.auth.uid || isModerator();
      allow delete: if resource.data.organizerId == request.auth.uid || isAdmin();
      
      match /participants/{userId} {
        allow read: if isAuthenticated();
        allow create: if isOwner(userId);
        allow delete: if isOwner(userId) || isModerator();
      }
      
      match /results/{resultId} {
        allow read: if isAuthenticated();
        allow write: if isModerator();
      }
    }
    
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if resource.data.authorId == request.auth.uid || isModerator();
      allow delete: if resource.data.authorId == request.auth.uid || isAdmin();
    }
    
    match /questionCategories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isModerator();
    }
    
    match /reports/{reportId} {
      allow read: if resource.data.reporterId == request.auth.uid || isModerator();
      allow create: if isAuthenticated() && request.resource.data.reporterId == request.auth.uid;
      allow update: if isModerator();
      allow delete: if isAdmin();
    }
    
    match /leaderboards/{boardType} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      
      match /entries/{userId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId) || isAdmin();
      }
    }
    
    match /notifications/{notificationId} {
      allow read: if resource.data.userId == request.auth.uid || resource.data.fromUserId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.fromUserId == request.auth.uid;
      allow update: if resource.data.userId == request.auth.uid;
      allow delete: if resource.data.userId == request.auth.uid || isAdmin();
    }
    
    match /friendRequests/{requestId} {
      allow read: if resource.data.fromUserId == request.auth.uid || resource.data.toUserId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.fromUserId == request.auth.uid;
      allow update: if resource.data.toUserId == request.auth.uid;
      allow delete: if resource.data.fromUserId == request.auth.uid || resource.data.toUserId == request.auth.uid;
    }
    
    match /gameSessions/{sessionId} {
      allow read: if resource.data.userId == request.auth.uid || request.auth.uid in resource.data.participants || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if resource.data.userId == request.auth.uid || request.auth.uid in resource.data.participants;
    }
    
    match /systemLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
    }
    
    match /bans/{userId} {
      allow read: if isAdmin();
      allow write: if isModerator();
    }
    
    match /userStats/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin();
    }
  }
}